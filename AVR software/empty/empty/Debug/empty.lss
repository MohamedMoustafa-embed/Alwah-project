
empty.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000734  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ea  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000311  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b5  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001973  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	8f d0       	rcall	.+286    	; 0x152 <main>
  34:	a7 c0       	rjmp	.+334    	; 0x184 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <analogRead>:
unsigned char USART_Read(void){
	//RXC be 1 when be ready to recieve
	while (!(UCSRA & (1<<RXC)));
	//get data from the buffer
	return UDR;
}
  38:	37 9a       	sbi	0x06, 7	; 6
  3a:	96 b1       	in	r25, 0x06	; 6
  3c:	93 60       	ori	r25, 0x03	; 3
  3e:	96 b9       	out	0x06, r25	; 6
  40:	3d 9a       	sbi	0x07, 5	; 7
  42:	87 b9       	out	0x07, r24	; 7
  44:	36 9a       	sbi	0x06, 6	; 6
  46:	34 9b       	sbis	0x06, 4	; 6
  48:	fe cf       	rjmp	.-4      	; 0x46 <__SREG__+0x7>
  4a:	84 b1       	in	r24, 0x04	; 4
  4c:	95 b1       	in	r25, 0x05	; 5
  4e:	08 95       	ret

00000050 <USART_Transmit>:
  50:	5d 9b       	sbis	0x0b, 5	; 11
  52:	fe cf       	rjmp	.-4      	; 0x50 <USART_Transmit>
  54:	8c b9       	out	0x0c, r24	; 12
  56:	08 95       	ret

00000058 <print_adc>:
void print_adc(uint16_t value){//take pin number you want to read as 0,1,2,3,4,5,6,7
  58:	ef 92       	push	r14
  5a:	ff 92       	push	r15
  5c:	0f 93       	push	r16
  5e:	1f 93       	push	r17
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
  64:	ac 01       	movw	r20, r24
	uint8_t one_pos = 0; /*ones position*/ uint8_t ten_pos = 0; /*tens position*/
	uint8_t hund_pos = 0; /*hundreds position*/uint8_t thous_pos = 0; /*thousands posi*/
	//***************ADC value to decimal******//
	one_pos   = value % 10; value /= 10;ten_pos   = value % 10;
  66:	9c 01       	movw	r18, r24
  68:	ad ec       	ldi	r26, 0xCD	; 205
  6a:	bc ec       	ldi	r27, 0xCC	; 204
  6c:	7f d0       	rcall	.+254    	; 0x16c <__umulhisi3>
  6e:	ec 01       	movw	r28, r24
  70:	d6 95       	lsr	r29
  72:	c7 95       	ror	r28
  74:	d6 95       	lsr	r29
  76:	c7 95       	ror	r28
  78:	d6 95       	lsr	r29
  7a:	c7 95       	ror	r28
  7c:	9e 01       	movw	r18, r28
  7e:	22 0f       	add	r18, r18
  80:	33 1f       	adc	r19, r19
  82:	ce 01       	movw	r24, r28
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	82 0f       	add	r24, r18
  92:	93 1f       	adc	r25, r19
  94:	8a 01       	movw	r16, r20
  96:	08 1b       	sub	r16, r24
  98:	19 0b       	sbc	r17, r25
  9a:	9e 01       	movw	r18, r28
  9c:	67 d0       	rcall	.+206    	; 0x16c <__umulhisi3>
  9e:	96 95       	lsr	r25
  a0:	87 95       	ror	r24
  a2:	96 95       	lsr	r25
  a4:	87 95       	ror	r24
  a6:	96 95       	lsr	r25
  a8:	87 95       	ror	r24
  aa:	9c 01       	movw	r18, r24
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	82 0f       	add	r24, r18
  be:	93 1f       	adc	r25, r19
  c0:	c8 1b       	sub	r28, r24
  c2:	d9 0b       	sbc	r29, r25
	value /= 10 ;hund_pos  = value % 10;thous_pos = value / 10;
  c4:	9a 01       	movw	r18, r20
  c6:	36 95       	lsr	r19
  c8:	27 95       	ror	r18
  ca:	36 95       	lsr	r19
  cc:	27 95       	ror	r18
  ce:	ab e7       	ldi	r26, 0x7B	; 123
  d0:	b4 e1       	ldi	r27, 0x14	; 20
  d2:	4c d0       	rcall	.+152    	; 0x16c <__umulhisi3>
  d4:	fc 01       	movw	r30, r24
  d6:	f6 95       	lsr	r31
  d8:	e7 95       	ror	r30
  da:	9f 01       	movw	r18, r30
  dc:	ad ec       	ldi	r26, 0xCD	; 205
  de:	bc ec       	ldi	r27, 0xCC	; 204
  e0:	45 d0       	rcall	.+138    	; 0x16c <__umulhisi3>
  e2:	96 95       	lsr	r25
  e4:	87 95       	ror	r24
  e6:	96 95       	lsr	r25
  e8:	87 95       	ror	r24
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	9c 01       	movw	r18, r24
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	82 0f       	add	r24, r18
 102:	93 1f       	adc	r25, r19
 104:	7f 01       	movw	r14, r30
 106:	e8 1a       	sub	r14, r24
 108:	f9 0a       	sbc	r15, r25
 10a:	9a 01       	movw	r18, r20
 10c:	36 95       	lsr	r19
 10e:	27 95       	ror	r18
 110:	36 95       	lsr	r19
 112:	27 95       	ror	r18
 114:	36 95       	lsr	r19
 116:	27 95       	ror	r18
 118:	a5 ec       	ldi	r26, 0xC5	; 197
 11a:	b0 e2       	ldi	r27, 0x20	; 32
 11c:	27 d0       	rcall	.+78     	; 0x16c <__umulhisi3>
 11e:	92 95       	swap	r25
 120:	82 95       	swap	r24
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	89 27       	eor	r24, r25
 126:	9f 70       	andi	r25, 0x0F	; 15
 128:	89 27       	eor	r24, r25
	//ASCII conversion add 0x30 to each number to get acsii equivalent
	one_pos  +=0x30; ten_pos   +=0x30;
	hund_pos +=0x30; thous_pos +=0x30;
	//sending the 4 digits over usart
	USART_Transmit(thous_pos); USART_Transmit(hund_pos);
 12a:	80 5d       	subi	r24, 0xD0	; 208
 12c:	91 df       	rcall	.-222    	; 0x50 <USART_Transmit>
 12e:	80 e3       	ldi	r24, 0x30	; 48
 130:	8e 0d       	add	r24, r14
 132:	8e df       	rcall	.-228    	; 0x50 <USART_Transmit>
	USART_Transmit(ten_pos);   USART_Transmit(one_pos);
 134:	8c 2f       	mov	r24, r28
 136:	80 5d       	subi	r24, 0xD0	; 208
 138:	8b df       	rcall	.-234    	; 0x50 <USART_Transmit>
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	80 0f       	add	r24, r16
 13e:	88 df       	rcall	.-240    	; 0x50 <USART_Transmit>
	USART_Transmit('\n');
 140:	8a e0       	ldi	r24, 0x0A	; 10
 142:	86 df       	rcall	.-244    	; 0x50 <USART_Transmit>
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	08 95       	ret

00000152 <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		int v =analogRead(1);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	71 df       	rcall	.-286    	; 0x38 <analogRead>
		print_adc(v);
 156:	80 df       	rcall	.-256    	; 0x58 <print_adc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f e3       	ldi	r18, 0x3F	; 63
 15a:	8d e0       	ldi	r24, 0x0D	; 13
 15c:	93 e0       	ldi	r25, 0x03	; 3
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0xc>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x16>
 168:	00 00       	nop
 16a:	f3 cf       	rjmp	.-26     	; 0x152 <main>

0000016c <__umulhisi3>:
 16c:	a2 9f       	mul	r26, r18
 16e:	b0 01       	movw	r22, r0
 170:	b3 9f       	mul	r27, r19
 172:	c0 01       	movw	r24, r0
 174:	a3 9f       	mul	r26, r19
 176:	01 d0       	rcall	.+2      	; 0x17a <__umulhisi3+0xe>
 178:	b2 9f       	mul	r27, r18
 17a:	70 0d       	add	r23, r0
 17c:	81 1d       	adc	r24, r1
 17e:	11 24       	eor	r1, r1
 180:	91 1d       	adc	r25, r1
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
